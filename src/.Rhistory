library(tidyr)
library(tidyverse)
library(RColorBrewer)
library(patchwork)
library(dplyr)
source('./utilities/descriptive_funs.R')
df <- read_csv("./data/clean_SLAM_data.csv")
#df <- filter(df, user_id %in% sample(unique(df$user_id), 100))
df <- df %>%
group_by(user_id, stimulus_id) %>%
mutate(repetition = 1:n(),
lag = time - lag(time, 1)) %>%
ungroup() %>%
mutate(language = case_when(language == 'es_en' ~ 'Spanish learning English',
language == 'en_es' ~ 'Enlish learning Spanish',
TRUE ~ 'French learning English'),
lag_cat = case_when(lag <= 90               ~ '0 to 90 sec',
lag <= 60*60            ~ '90 sec to 1 hr',
lag <= 60 * 60 * 24     ~ '1 hr to 1 day',
lag <= 60 * 60 * 24 * 2 ~ '1 to 2 days',
lag <= 60 * 60 * 24 * 3 ~ '2 to 3 days',
lag <= 1E7              ~ '>3 days',
is.na(lag)              ~ 'First rep'),
format = case_when(format == 'listen' ~ 'Listen',
format == 'reverse_tap' ~ 'Select',
format == 'reverse_translate' ~ 'Translate'))
df$lag_cat <- factor(df$lag_cat, levels = c('0 to 90 sec', '90 sec to 1 hr', '1 hr to 1 day', '1 to 2 days', '2 to 3 days', '>3 days', 'First rep'))
max_reps <- 15
plot.rep <- df %>%
mutate(repetition = ifelse(repetition >= 20, 20, repetition)) %>%
group_by(user_id, language, repetition, format) %>%
summarise(accuracy = mean(performance)) %>%
group_by(language, repetition, format) %>%
summarise(se = sqrt(var(accuracy)/n()),
accuracy = mean(accuracy))
p1 <- lapply(c('Listen', 'Select', 'Translate'),
function(x) plot.rep.acc(plot.rep, x))
p1 <- p1[[1]] / p1[[2]] / p1[[3]] + plot_layout(guides = "collect") & theme(legend.position = 'bottom', legend.direction = 'horizontal')
p1
plot.lag <- df %>%
filter(repetition > 1) %>%
group_by(user_id, language, lag_cat, format) %>%
summarise(accuracy = mean(performance, na.rm = TRUE)) %>%
group_by(language, lag_cat, format) %>%
summarise(se = sqrt(var(accuracy, na.rm = TRUE)/n()),
accuracy = mean(accuracy, na.rm = TRUE)) %>%
mutate(x.val = as.numeric(lag_cat)-1)
p2 <- lapply(c('Listen', 'Select', 'Translate'),
function(x) plot.lag.acc(plot.lag, x))
p2 <- p2[[1]] / p2[[2]] / p2[[3]] + plot_layout(guides = "collect") & theme(legend.position = 'bottom', legend.direction = 'horizontal')
p2
reg.df <- df %>%
group_by(user_id, language, stimulus_id) %>%
mutate(max_rep = n()) %>%
ungroup() %>%
filter(max_rep >= 3) %>%
group_by(user_id, language) %>%
mutate(n_stimuli = length(unique(stimulus_id))) %>%
ungroup() %>%
filter(n_stimuli >= 3) %>%
group_by(user_id) %>%
mutate(n_lang = length(unique(language))) %>%
filter(n_lang == 1) %>%
ungroup() %>%
select(performance, format, language, repetition, repetition, time_diff)
# Add some analysis variables
reg.df <- reg.df %>%
mutate_if(is.character, as.factor) %>%
mutate(first            = as.integer(repetition == 1),
fit_lag          = as.numeric(first == 0),
history_seen_log = ifelse(first != 1, log(repetition), 0),
lag_log          = ifelse(first != 1, log(time_diff), 0))
glm_fixed <- glm(performance ~
first +
lag_log : fit_lag +
history_seen_log +
language +
format,
data = reg.df,
family = binomial)
plot.reg(glm_fixed)
library(tidyr)
library(tidyverse)
library(RColorBrewer)
library(patchwork)
library(dplyr)
source('./utilities/descriptive_funs.R')
df <- read_csv("./data/clean_SLAM_data.csv")
df <- df %>%
group_by(user_id, stimulus_id) %>%
mutate(repetition = 1:n(),
lag = time - lag(time, 1)) %>%
ungroup() %>%
mutate(language = case_when(language == 'es_en' ~ 'Spanish learning English',
language == 'en_es' ~ 'Enlish learning Spanish',
TRUE ~ 'French learning English'),
lag_cat = case_when(lag <= 90               ~ '0 to 90 sec',
lag <= 60*60            ~ '90 sec to 1 hr',
lag <= 60 * 60 * 24     ~ '1 hr to 1 day',
lag <= 60 * 60 * 24 * 2 ~ '1 to 2 days',
lag <= 60 * 60 * 24 * 3 ~ '2 to 3 days',
lag <= 1E7              ~ '>3 days',
is.na(lag)              ~ 'First rep'),
format = case_when(format == 'listen' ~ 'Listen',
format == 'reverse_tap' ~ 'Select',
format == 'reverse_translate' ~ 'Translate'))
df$lag_cat <- factor(df$lag_cat, levels = c('0 to 90 sec', '90 sec to 1 hr', '1 hr to 1 day', '1 to 2 days', '2 to 3 days', '>3 days', 'First rep'))
max_reps <- 15
plot.rep <- df %>%
mutate(repetition = ifelse(repetition >= 20, 20, repetition)) %>%
group_by(user_id, language, repetition, format) %>%
summarise(accuracy = mean(performance)) %>%
group_by(language, repetition, format) %>%
summarise(se = sqrt(var(accuracy)/n()),
accuracy = mean(accuracy))
p1 <- lapply(c('Listen', 'Select', 'Translate'),
function(x) plot.rep.acc(plot.rep, x))
p1 <- p1[[1]] / p1[[2]] / p1[[3]] + plot_layout(guides = "collect") & theme(legend.position = 'bottom', legend.direction = 'horizontal')
p1
plot.lag <- df %>%
filter(repetition > 1) %>%
group_by(user_id, language, lag_cat, format) %>%
summarise(accuracy = mean(performance, na.rm = TRUE)) %>%
group_by(language, lag_cat, format) %>%
summarise(se = sqrt(var(accuracy, na.rm = TRUE)/n()),
accuracy = mean(accuracy, na.rm = TRUE)) %>%
mutate(x.val = as.numeric(lag_cat)-1)
p2 <- lapply(c('Listen', 'Select', 'Translate'),
function(x) plot.lag.acc(plot.lag, x))
p2 <- p2[[1]] / p2[[2]] / p2[[3]] + plot_layout(guides = "collect") & theme(legend.position = 'bottom', legend.direction = 'horizontal')
p2
reg.df <- df %>%
group_by(user_id, language, stimulus_id) %>%
mutate(max_rep = n()) %>%
ungroup() %>%
filter(max_rep >= 3) %>%
group_by(user_id, language) %>%
mutate(n_stimuli = length(unique(stimulus_id))) %>%
ungroup() %>%
filter(n_stimuli >= 3) %>%
group_by(user_id) %>%
mutate(n_lang = length(unique(language))) %>%
filter(n_lang == 1) %>%
ungroup()
write.csv(reg.df, "./data/subset_SLAM_data.csv", row.names = FALSE)
# Add some analysis variables
reg.df <- reg.df %>%
mutate_if(is.character, as.factor) %>%
mutate(first            = as.integer(repetition == 1),
fit_lag          = as.numeric(first == 0),
history_seen_log = ifelse(first != 1, log(repetition), 0),
lag_log          = ifelse(first != 1, log(time_diff), 0))
glm_fixed <- glm(performance ~
first +
lag_log : fit_lag +
history_seen_log +
language +
format,
data = reg.df,
family = binomial)
plot.reg(glm_fixed)
library(tidyr)
library(tidyverse)
library(RColorBrewer)
library(patchwork)
library(dplyr)
library(data.table)
library(parallel)
source("./utilities/model_funs.R") # had to modify this function
df <- read_csv("./data/subset_SLAM_data.csv")
df <- df %>%
mutate(time_diff = ifelse(repetition == 1, 1000, time_diff),
lag       = time_diff,
first     = 0)
df.first <- filter(df, repetition == 1) %>%
mutate(time        = time - 1000,
repetition  = 0,
time_diff   = NA,
lag         = NA,
performance = NA,
first       = 1)
df <- bind_rows(df.first, df) %>%
arrange(user_id, stimulus_id, repetition) %>%
mutate(repetition = repetition + 1)
df <- setDT(df)
# Calc model stability
df[ , stability := get_stability(time),
by = c("user_id", "stimulus_id")]
# Calc model time
x <- 0.6
df[ , model.time := get_model_time(time, x),
by = c("user_id", "stimulus_id")]
# Calc score
df[ , score := ifelse(repetition > 1, performance, NA_integer_)]
df[ , performance_num := as.numeric(performance)]
write.csv(df, "./data/ppe_SLAM_data.csv", row.names = FALSE)
## 3. Model fits (language by format)
## 3.1 Fit
params <- list(b = 0, m = .1, tau.1 = .4, tau.2 = .4, tau.3 = .4, s = .2)
mp <- mclapply(unique(df$language),
function(x) {
output <- fit_ppe_vary_tau(filter(df, language == x), params, 'log_likelihood')
output$language <- x
return(output)
}
)
mp <- bind_rows(mp)
df.pred <- left_join(df, mp, by = 'language') %>%
mutate(tau = case_when(format == 'Listen'    ~ tau.1,
format == 'Select'    ~ tau.2,
format == 'Translate' ~ tau.3),
ppe_pred_format = pred.ppe.tau(tau, repetition, model.time, b, m, stability, s),
repetition = repetition - 1)
## 3.3 Plot learning
perf_avg <- df.pred %>%
mutate(repetition = ifelse(repetition >= 20, 20, repetition)) %>%
group_by(user_id, language, repetition, format) %>%
summarise(Observed = mean(performance),
Model  = mean(ppe_pred_format)) %>%
group_by(language, repetition, format) %>%
summarise(se = sqrt(var(Observed)/n()),
Observed = mean(Observed),
se.predict = sqrt(var(Model)/n()),
Model = mean(Model))
perf_avg <- gather(perf_avg %>% select(language, repetition, format, Observed, Model), key = 'Outcome', value = 'Accuracy', c('Observed', 'Model'))
p1 <- lapply(c('Listen', 'Select', 'Translate'),
function(x) pf(x, perf_avg))
p1 <- p1[[1]] / p1[[2]] / p1[[3]] + plot_layout(guides = "collect") & theme(legend.position = 'bottom')
p1
df.pred$lag_cat <- factor(df$lag_cat, levels = c('0 to 90 sec', '90 sec to 1 hr', '1 hr to 1 day', '1 to 2 days', '2 to 3 days', '>3 days', 'First rep'))
ret_avg <- df.pred %>%
filter(repetition > 1) %>%
group_by(user_id, language, lag_cat, format) %>%
summarise(Observed = mean(performance, na.rm = TRUE),
Model  = mean(ppe_pred_format)) %>%
group_by(language, lag_cat, format) %>%
summarise(se = sqrt(var(Observed)/n()),
Observed = mean(Observed),
se.predict = sqrt(var(Model)/n()),
Model = mean(Model)) %>%
mutate(x.val = as.numeric(lag_cat))
ret_avg <- gather(ret_avg %>% select(language, lag_cat, x.val, format, Observed, Model), key = 'Outcome', value = 'Accuracy', c('Observed', 'Model'))
p2 <- lapply(c('Listen', 'Select', 'Translate'),
function(x) pr(x, ret_avg))
p2 <- p2[[1]] / p2[[2]] / p2[[3]]  + plot_layout(guides = "collect") & theme(legend.position = 'bottom')
p2
