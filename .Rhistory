library(tidyverse)
library(RColorBrewer)
library(patchwork)
library(dplyr)
source('./utilities/descriptive_funs.R')
df <- read_csv("./data/clean_SLAM_small.csv")
library(tidyverse)
library(RColorBrewer)
library(patchwork)
library(dplyr)
source('./utilities/descriptive_funs.R')
input.dir  <- 'data'
df <- read_csv(file.path(input.dir, 'clean_SLAM_small.csv'))
setwd("~/Desktop/RAND_Desktop/NonRAND/ExternalRepo/CogMod/src")
library(tidyverse)
library(RColorBrewer)
library(patchwork)
library(dplyr)
source('./utilities/descriptive_funs.R')
input.dir  <- 'data'
df <- read_csv(file.path(input.dir, 'clean_SLAM_small.csv'))
library(tidyverse)
library(RColorBrewer)
library(patchwork)
library(dplyr)
source('./utilities/descriptive_funs.R')
input.dir  <- 'data/'
df <- read_csv(file.path(input.dir, 'clean_SLAM_small.csv'))
library(tidyverse)
library(RColorBrewer)
library(patchwork)
library(dplyr)
source('./utilities/descriptive_funs.R')
df <- read_csv("./data/clean_SLAM_small.csv")
library(tidyverse)
library(RColorBrewer)
library(patchwork)
library(dplyr)
source('./utilities/descriptive_funs.R')
print(getwd())
df <- read_csv("./data/clean_SLAM_small.csv")
library(tidyverse)
library(RColorBrewer)
library(patchwork)
library(dplyr)
source('./utilities/descriptive_funs.R')
print(list.files('./data'))
df <- read_csv("./data/clean_SLAM_small.csv")
library(tidyverse)
library(RColorBrewer)
library(patchwork)
library(dplyr)
source('./utilities/descriptive_funs.R')
df <- read_csv("./data/clean_SLAM_small.csv")
df <- df %>%
group_by(user_id, stimulus_id) %>%
mutate(repetition = 1:n(),
lag = time - lag(time, 1)) %>%
ungroup() %>%
mutate(language = case_when(language == 'es_en' ~ 'Spanish learning English',
language == 'en_es' ~ 'Enlish learning Spanish',
TRUE ~ 'French learning English'),
lag_cat = case_when(lag <= 90               ~ '0 to 90 sec',
lag <= 60*60            ~ '90 sec to 1 hr',
lag <= 60 * 60 * 24     ~ '1 hr to 1 day',
lag <= 60 * 60 * 24 * 2 ~ '1 to 2 days',
lag <= 60 * 60 * 24 * 3 ~ '2 to 3 days',
lag <= 1E7              ~ '>3 days',
is.na(lag)              ~ 'First rep'),
format = case_when(format == 'listen'            ~ 'Listen',
format == 'reverse_tap'       ~ 'Select',
format == 'reverse_translate' ~ 'Translate'))
df$lag_cat <- factor(df$lag_cat, levels = c('0 to 90 sec', '90 sec to 1 hr', '1 hr to 1 day', '1 to 2 days', '2 to 3 days', '>3 days', 'First rep'))
getwd()
reg.df <- read_csv('./src/data/subset_SLAM_data.csv')
reg.df <- reg.df %>%
mutate_if(is.character, as.factor) %>%
mutate(first            = as.integer(repetition == 1),
fit_lag          = as.numeric(first == 0),
history_seen_log = ifelse(first != 1, log(repetition), 0),
lag_log          = ifelse(first != 1, log(time_diff), 0))
# Conduct GLM
glm_fixed <- glm(performance ~
first +
lag_log : fit_lag +
history_seen_log +
language +
format,
data = reg.df,
family = binomial)
library(broom)
f1<-tidy(glm_fixed)
f1
# Point estimates and 95% CIs on odds ratio scale
glm_fixed_or <- data.frame(OR = exp(coef(glm_fixed)),
CI = exp(confint.default(glm_fixed)))
glm_fixed_or$var <- row.names(glm_fixed_or)
glm_fixed_or <- glm_fixed_or[-1, ] # drop intercept
var_levels <- glm_fixed_or$var[order(glm_fixed_or$OR)]
glm_fixed_or
glm_fixed_or <- tidy(glm_fixed)
glm_fixed_or
glm_fixed_or <- tidy(glm_fixed) %>%
select(term, estimate, std.error) %>%
mutate(estimate = format(round(estimate, 3), nsmall = 3),
std_error = format(round(std_error, 3), nsmall = 3)) %>%
rename(Term = term,
Estimate = estimate,
`Standard Error` = std_error)
glm_fixed_or <- tidy(glm_fixed) %>%
select(term, estimate, std.error) %>%
mutate(estimate = format(round(estimate, 3), nsmall = 3),
std.error = format(round(std.error, 3), nsmall = 3)) %>%
rename(Term = term,
Estimate = estimate,
`Standard Error` = std.error)
glm_fixed_or
# Exclude stimuli with fewer than 3 repetitions, and individuals with fewer than 3 stimuli
reg.df <- df %>%
group_by(user_id, language, stimulus_id) %>%
mutate(max_rep = n()) %>%
ungroup() %>%
filter(max_rep >= 3) %>%
group_by(user_id, language) %>%
mutate(n_stimuli = length(unique(stimulus_id))) %>%
ungroup() %>%
filter(n_stimuli >= 3) %>%
group_by(user_id) %>%
mutate(n_lang = length(unique(language))) %>%
filter(n_lang == 1) %>%
ungroup()
write.csv(reg.df, "./data/subset_SLAM_data.csv", row.names = FALSE)
# Include additional analysis variables
reg.df <- reg.df %>%
mutate_if(is.character, as.factor) %>%
mutate(first            = as.integer(repetition == 1),
fit_lag          = as.numeric(first == 0),
history_seen_log = ifelse(first != 1, log(repetition), 0),
lag_log          = ifelse(first != 1, log(time_diff), 0))
# Conduct GLM
glm_fixed <- glm(performance ~
first +
lag_log : fit_lag +
history_seen_log +
language +
format,
data = reg.df,
family = binomial)
# Plot coefficients
p3 <- plot.reg(glm_fixed)
table.reg(glm_fixed)
library(dt)
table.reg <- function(glm_fixed){
glm_fixed <- tidy(glm_fixed) %>%
select(term, estimate, std.error) %>%
mutate(estimate = format(round(estimate, 3), nsmall = 3),
std.error = format(round(std.error, 3), nsmall = 3)) %>%
rename(Term = term,
Estimate = estimate,
`Standard Error` = std.error)
datatable(glm_fixed, rownames = FALSE, class = 'cell-border stripe', style = 'bootstrap', options = list(dom = 't'))
}
table.reg(glm_fixed)
library(data.table)
table.reg <- function(glm_fixed){
glm_fixed <- tidy(glm_fixed) %>%
select(term, estimate, std.error) %>%
mutate(estimate = format(round(estimate, 3), nsmall = 3),
std.error = format(round(std.error, 3), nsmall = 3)) %>%
rename(Term = term,
Estimate = estimate,
`Standard Error` = std.error)
datatable(glm_fixed, rownames = FALSE, class = 'cell-border stripe', style = 'bootstrap', options = list(dom = 't'))
}
library(data.table)
table.reg(glm_fixed)
table.reg <- function(glm_fixed){
glm_fixed <- tidy(glm_fixed) %>%
select(term, estimate, std.error) %>%
mutate(estimate = format(round(estimate, 3), nsmall = 3),
std.error = format(round(std.error, 3), nsmall = 3)) %>%
rename(Term = term,
Estimate = estimate,
`Standard Error` = std.error)
dt(glm_fixed, rownames = FALSE, class = 'cell-border stripe', style = 'bootstrap', options = list(dom = 't'))
}
table.reg(glm_fixed)
library(DT)
table.reg <- function(glm_fixed){
glm_fixed <- tidy(glm_fixed) %>%
select(term, estimate, std.error) %>%
mutate(estimate = format(round(estimate, 3), nsmall = 3),
std.error = format(round(std.error, 3), nsmall = 3)) %>%
rename(Term = term,
Estimate = estimate,
`Standard Error` = std.error)
datatable(glm_fixed, rownames = FALSE, class = 'cell-border stripe', style = 'bootstrap', options = list(dom = 't'))
}
table.reg(glm_fixed)
# Exclude stimuli with fewer than 3 repetitions, and individuals with fewer than 3 stimuli
reg.df <- df %>%
group_by(user_id, language, stimulus_id) %>%
mutate(max_rep = n()) %>%
ungroup() %>%
filter(max_rep >= 3) %>%
group_by(user_id, language) %>%
mutate(n_stimuli = length(unique(stimulus_id))) %>%
ungroup() %>%
filter(n_stimuli >= 3) %>%
group_by(user_id) %>%
mutate(n_lang = length(unique(language))) %>%
filter(n_lang == 1) %>%
ungroup()
write.csv(reg.df, "./data/subset_SLAM_data.csv", row.names = FALSE)
# Include additional analysis variables
reg.df <- reg.df %>%
mutate_if(is.character, as.factor) %>%
mutate(first            = as.integer(repetition == 1),
fit_lag          = as.numeric(first == 0),
history_seen_log = ifelse(first != 1, log(repetition), 0),
lag_log          = ifelse(first != 1, log(time_diff), 0))
# Conduct GLM
glm_fixed <- glm(performance ~
first +
lag_log : fit_lag +
history_seen_log +
language +
format,
data = reg.df,
family = binomial)
# Plot coefficients
p3 <- plot.reg(glm_fixed)
table.reg(glm_fixed)
# Show coefficients
table.reg(glm_fixed)
glm_fixe
glm_fixed
df <- df %>%
group_by(user_id, stimulus_id) %>%
mutate(repetition = 1:n(),
lag = time - lag(time, 1)) %>%
ungroup() %>%
mutate(language = case_when(language == 'es_en' ~ 'Spanish learning English',
language == 'en_es' ~ 'Enlish learning Spanish',
TRUE ~ 'French learning English'),
lag_cat = case_when(lag <= 90               ~ '0 to 90 sec',
lag <= 60 * 60          ~ '90 sec to 1 hr',
lag <= 60 * 60 * 24     ~ '1 hr to 1 day',
lag <= 60 * 60 * 24 * 2 ~ '1 to 2 days',
lag <= 60 * 60 * 24 * 3 ~ '2 to 3 days',
lag <= 1E7              ~ '>3 days',
is.na(lag)              ~ 'First rep'),
format = case_when(format == 'listen'            ~ 'Listen',
format == 'reverse_tap'       ~ 'Select',
format == 'reverse_translate' ~ 'Translate'))
library(tidyverse)
library(RColorBrewer)
library(patchwork)
library(dplyr)
library(broom)
library(DT)
source('./utilities/descriptive_funs.R')
input.dir  <- 'inputs'
df <- read_csv(file.path(input.dir, 'clean_SLAM_small.csv'))
df <- df %>%
group_by(user_id, stimulus_id) %>%
mutate(repetition = 1:n(),
lag = time - lag(time, 1)) %>%
ungroup() %>%
mutate(language = case_when(language == 'es_en' ~ 'Spanish learning English',
language == 'en_es' ~ 'Enlish learning Spanish',
TRUE ~ 'French learning English'),
lag_cat = case_when(lag <= 90               ~ '0 to 90 sec',
lag <= 60 * 60          ~ '90 sec to 1 hr',
lag <= 60 * 60 * 24     ~ '1 hr to 1 day',
lag <= 60 * 60 * 24 * 2 ~ '1 to 2 days',
lag <= 60 * 60 * 24 * 3 ~ '2 to 3 days',
lag <= 1E7              ~ '>3 days',
is.na(lag)              ~ 'First rep'),
format = case_when(format == 'listen'            ~ 'Listen',
format == 'reverse_tap'       ~ 'Select',
format == 'reverse_translate' ~ 'Translate'))
df$lag_cat <- factor(df$lag_cat, levels = c('0 to 90 sec', '90 sec to 1 hr',
'1 hr to 1 day', '1 to 2 days',
'2 to 3 days', '>3 days', 'First rep'))
max_reps <- 20
plot.rep <- df %>%
mutate(repetition = ifelse(repetition >= max_reps, max_reps, repetition)) %>%
group_by(user_id, language, repetition, format) %>%
summarise(accuracy = mean(performance)) %>%
group_by(language, repetition, format) %>%
summarise(se = sqrt(var(accuracy)/n()),
accuracy = mean(accuracy))
p1 <- lapply(c('Listen', 'Select', 'Translate'),
function(x) plot.rep.acc(plot.rep, x))
p1 <- p1[[1]] / p1[[2]] / p1[[3]] + plot_layout(guides = 'collect') & theme(legend.position = 'bottom', legend.direction = 'horizontal')
p1
plot.lag <- df %>%
filter(repetition > 1) %>%
group_by(user_id, language, lag_cat, format) %>%
summarise(accuracy = mean(performance, na.rm = TRUE)) %>%
group_by(language, lag_cat, format) %>%
summarise(se = sqrt(var(accuracy, na.rm = TRUE)/n()),
accuracy = mean(accuracy, na.rm = TRUE)) %>%
mutate(x.val = as.numeric(lag_cat)-1)
p2 <- lapply(c('Listen', 'Select', 'Translate'),
function(x) plot.lag.acc(plot.lag, x))
p2 <- p2[[1]] / p2[[2]] / p2[[3]] + plot_layout(guides = 'collect') & theme(legend.position = 'bottom', legend.direction = 'horizontal')
# Exclude stimuli with fewer than 3 repetitions, and individuals with fewer than 3 stimuli
reg.df <- df %>%
group_by(user_id, language, stimulus_id) %>%
mutate(max_rep = n()) %>%
ungroup() %>%
filter(max_rep >= 3) %>%
group_by(user_id, language) %>%
mutate(n_stimuli = length(unique(stimulus_id))) %>%
ungroup() %>%
filter(n_stimuli >= 3) %>%
group_by(user_id) %>%
mutate(n_lang = length(unique(language))) %>%
filter(n_lang == 1) %>%
ungroup()
write.csv(reg.df, file.path(input.dir, 'subset_SLAM_data.csv'), row.names = FALSE)
# Include additional analysis variables
reg.df <- reg.df %>%
mutate_if(is.character, as.factor) %>%
mutate(first            = as.integer(repetition == 1),
fit_lag          = as.numeric(first == 0),
history_seen_log = ifelse(first != 1, log(repetition), 0),
lag_log          = ifelse(first != 1, log(time_diff), 0))
# Conduct GLM
glm_fixed <- glm(performance ~
first +
lag_log : fit_lag +
history_seen_log +
language +
format,
data = reg.df,
family = binomial)
OR    <- exp(coef(mod))[2]
CI    <- exp(confint.default(mod))[2,]
mod<-glm_fixed
OR    <- exp(coef(mod))[2]
CI    <- exp(confint.default(mod))[2,]
OR
CI
OR    <- exp(coef(mod))
OR
exp(confint.default(mod))
TRM <- rownames(CI)
TRM
CI
CI <- exp(confint.default(mod))
rownames(CI)
vals <- cbind(exp(coef(mod)), exp(confint.default(mod)))
vals
colnames(vals)
vals <- cbind(exp(coef(mod)), exp(confint.default(mod)))
vals <- cbind(rownames(vals), vals)
vals
OR <- exp(coef(mod))
CI <- exp(confint.default(mod))
TRM <- rownames(CI)
OR
OR  <- exp(coef(mod))
CI  <- exp(confint.default(mod))
TRM <- rownames(CI)
glm_fixed <- c(OR, CI, TRM) %>% bind_cols()
View(glm_fixed)
OR  <- exp(coef(mod))
CI  <- exp(confint.default(mod))
TRM <- rownames(CI)
glm_fixed <- cbind(OR, CI)
View(glm_fixed)
glm_fixed <- cbind(OR, TRM)
View(glm_fixed)
OR  <- exp(coef(mod))
CI  <- exp(confint.default(mod))
TRM <- rownames(CI)
glm_fixed <- do.call("cbind", list(TRM, OR, CI))
View(glm_fixed)
OR  <- exp(coef(mod))
CI  <- exp(confint.default(mod))
TRM <- rownames(CI)
glm_fixed <- do.call("cbind", list(TRM, OR, CI))
rownames(glm_fixed) <- NA
colnames(glm_fixed)
OR  <- exp(coef(mod))
CI  <- exp(confint.default(mod))
TRM <- rownames(CI)
glm_fixed <- do.call("cbind", list(TRM, OR, CI))
colnames(glm_fixed) <- c('Term', 'Estimate', 'Lower Bound', 'Upper Bound')
glm_fixed <- glm_fixed %>%
mutate(Estimate      = format(round(Estimate, 3), nsmall = 3),
`Lower Bound` = format(round(`Lower Bound`, 3), nsmall = 3),
`Upper Bound` = format(round(`Upper Bound`, 3), nsmall = 3))
sapply(glm_fixed, class)
OR  <- exp(coef(mod))
CI  <- exp(confint.default(mod))
TRM <- rownames(CI)
glm_fixed <- data.frame(Term = TRM,
Estimate = OR,
`Lower Bound` = CI[, 1],
`Upper Bound` = CI[, 2])
sapply(glm_fixed, class)
View(glm_fixed)
OR  <- exp(coef(mod))
CI  <- exp(confint.default(mod))
TRM <- rownames(CI)
glm_fixed <- data.frame(Term = TRM,
Estimate      = format(round(OR, 3),      nsmall = 3),
`Lower Bound` = format(round(CI[, 1], 3), nsmall = 3),
`Upper Bound` = format(round(CI[, 2], 3), nsmall = 3))
View(glm_fixed)
table.reg <- function(glm_fixed){
OR  <- exp(coef(mod))
CI  <- exp(confint.default(mod))
TRM <- rownames(CI)
glm_fixed <- data.frame(Term = TRM,
Estimate      = format(round(OR, 3),      nsmall = 3),
`Lower Bound` = format(round(CI[, 1], 3), nsmall = 3),
`Upper Bound` = format(round(CI[, 2], 3), nsmall = 3))
datatable(glm_fixed, rownames = FALSE, class = 'cell-border stripe', style = 'bootstrap', options = list(dom = 't'))
}
library(tidyr)
library(tidyverse)
library(RColorBrewer)
library(patchwork)
library(dplyr)
library(data.table)
library(parallel)
util.dir <- './utilities'
sapply(file.path(util.dir, list.files(util.dir)), source)
input.dir  <- 'inputs'
df <- read_csv(file.path(input.dir, 'subset_SLAM_data.csv'))
df <- df %>%
mutate(time_diff = ifelse(repetition == 1, 1000, time_diff),
lag       = time_diff,
first     = 0)
df.first <- filter(df, repetition == 1) %>%
mutate(time        = time - 1000,
repetition  = 0,
time_diff   = NA,
lag         = NA,
performance = NA,
first       = 1)
df <- bind_rows(df.first, df) %>%
arrange(user_id, stimulus_id, repetition) %>%
mutate(repetition = repetition + 1)
df <- setDT(df)
# Calculate model stability
df[ , stability := get_stability(time),
by = c('user_id', 'stimulus_id')]
# Calculate model time
x <- 0.6
df[ , model.time := get_model_time(time, x),
by = c('user_id', 'stimulus_id')]
# Calculate score
df[ , score := ifelse(repetition > 1, performance, NA_integer_)]
df[ , performance_num := as.numeric(performance)]
write.csv(df, file.path(input.dir, '/ppe_SLAM_data.csv', row.names = FALSE))
write.csv(df, file.path(input.dir, '/ppe_SLAM_data.csv'), row.names = FALSE)
write.csv(df, file.path(input.dir, 'ppe_SLAM_data.csv'), row.names = FALSE)
write.csv(df, file.path(input.dir, 'test.csv')
)
getwd()
list.files
library(tidyr)
library(tidyverse)
library(RColorBrewer)
library(patchwork)
library(dplyr)
library(data.table)
library(parallel)
util.dir <- './utilities'
sapply(file.path(util.dir, list.files(util.dir)), source)
input.dir  <- 'inputs'
df <- read_csv(file.path(input.dir, 'subset_SLAM_data.csv'))
df <- df %>%
mutate(time_diff = ifelse(repetition == 1, 1000, time_diff),
lag       = time_diff,
first     = 0)
df.first <- filter(df, repetition == 1) %>%
mutate(time        = time - 1000,
repetition  = 0,
time_diff   = NA,
lag         = NA,
performance = NA,
first       = 1)
df <- bind_rows(df.first, df) %>%
arrange(user_id, stimulus_id, repetition) %>%
mutate(repetition = repetition + 1)
df <- setDT(df)
# Calculate model stability
df[ , stability := get_stability(time),
by = c('user_id', 'stimulus_id')]
# Calculate model time
x <- 0.6
df[ , model.time := get_model_time(time, x),
by = c('user_id', 'stimulus_id')]
# Calculate score
df[ , score := ifelse(repetition > 1, performance, NA_integer_)]
df[ , performance_num := as.numeric(performance)]
print(list.files())
write.csv(df, file.path(input.dir, 'ppe_SLAM_data.csv'), row.names = FALSE)
p1
